{"version":3,"sources":["useDir.ts","dirSelector/index.tsx","filter/constants.ts","filter/item/index.tsx","filter/hooks/useInView.ts","filter/item/hooks/useOnClick.ts","filter/item/hooks/useSelect.ts","filter/index.tsx","filter/hooks/useScrollToItem.ts","filter/makeScrollToItem.ts","filter/hooks/useListChange.ts","__fixtures__/index.ts","index.tsx"],"names":["DIR","DirSelector","memo","setDir","onChange","useCallback","value","target","document","body","dir","DEFAULT_VALUE","undefined","Item","children","selected","setSelected","scrollToItem","threshold","ref","useRef","useInViewObserver","inViewRef","inView","setRef","node","current","useInView","isSelected","useMemo","onClick","reset","length","useOnClick","text","buttonClassName","useEffect","item","useSelect","data-in-view","className","type","Filter","list","stickLeft","listRef","useState","containerRef","stickLeftOriginal","behavior","invertStickLeft","container","getClientRects","containerWidth","width","containerX","x","itemWidth","itemX","offset","scrollTo","left","scrollLeft","makeScrollToItem","useScrollToItem","useListChange","map","LTR_DATA","RTL_DATA","smoothscroll","polyfill","App","isLTR","useDir","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a8c0deb8.chunk.js","sourcesContent":["import { useMemo, useState } from 'react';\n\nexport const DIR = {\n  LTR: 'ltr',\n  RTL: 'rtl',\n} as const;\n\nexport type Dir = typeof DIR[keyof typeof DIR];\n\nexport const useDir = () => {\n  const [dir, setDir] = useState<Dir>(DIR.LTR);\n  const isLTR = useMemo(() => dir === DIR.LTR, [dir]);\n\n  return { setDir, isLTR };\n};\n","import React, { memo, useCallback } from 'react';\n\nimport { DIR } from '../useDir';\n\nimport './index.css';\n\nimport type { ChangeEvent } from 'react';\nimport type { Dir } from '../useDir';\n\nexport const DirSelector = memo(({ setDir }: { readonly setDir: (dir: Dir) => void }) => {\n  const onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLSelectElement>) => {\n      setDir(value as Dir);\n      document.body.dir = value;\n    },\n    [setDir],\n  );\n\n  return (\n    <select onChange={onChange}>\n      <option value={DIR.LTR}>{DIR.LTR}</option>\n      <option value={DIR.RTL}>{DIR.RTL}</option>\n    </select>\n  );\n});\n","export const DEFAULT_VALUE = undefined;\n","import React, { memo, useMemo } from 'react';\n\nimport { useInView } from '../hooks';\nimport { useOnClick, useSelect } from './hooks';\n\nimport './index.css';\n\nimport type { ItemProps } from './types';\n\nexport const Item = memo(({ children, selected, setSelected, scrollToItem, value }: ItemProps) => {\n  const { inView, ref, setRef } = useInView({});\n  const isSelected = useMemo(() => selected === value, [selected, value]);\n  const onClick = useOnClick({ setSelected, isSelected });\n  const text = useMemo(() => value || children, [value, children]);\n  const buttonClassName = useMemo(() => (isSelected ? 'selected' : ''), [isSelected]);\n\n  useSelect({\n    scrollToItem,\n    isSelected,\n    ref,\n  });\n\n  return (\n    <li ref={setRef} data-in-view={inView}>\n      <button className={buttonClassName} onClick={onClick} type=\"button\" value={value}>\n        {text}\n      </button>\n    </li>\n  );\n});\n\nexport type { ItemValue } from './types';\n","import { useCallback, useRef } from 'react';\nimport { useInView as useInViewObserver } from 'react-intersection-observer';\n\ntype UseInViewObserverParams = Required<Parameters<typeof useInViewObserver>>[0];\n\nexport const useInView = ({ threshold = 0.95 }: Pick<UseInViewObserverParams, 'threshold'>) => {\n  const ref = useRef<HTMLElement>(null);\n  const [inViewRef, inView] = useInViewObserver({\n    threshold,\n  });\n\n  const setRef = useCallback(\n    (node: never) => {\n      // @ts-expect-error https://github.com/thebuilder/react-intersection-observer#how-can-i-assign-multiple-refs-to-a-component\n      ref.current = node;\n      inViewRef(node);\n    },\n    [inViewRef],\n  );\n\n  return {\n    setRef,\n    ref,\n    inView,\n  };\n};\n","import { useCallback } from 'react';\n\nimport { DEFAULT_VALUE } from '../../constants';\n\nimport type { ItemProps } from '../types';\n\nexport const useOnClick = ({\n  setSelected,\n  isSelected,\n}: Pick<ItemProps, 'setSelected'> & {\n  readonly isSelected: boolean;\n}) => {\n  const reset = useCallback(() => setSelected(DEFAULT_VALUE), [setSelected]);\n\n  return useCallback(\n    ({ target: { value } }) => {\n      if (isSelected) {\n        reset();\n        return;\n      }\n\n      setSelected(value.length > 0 ? value : DEFAULT_VALUE);\n    },\n    [isSelected, reset, setSelected],\n  );\n};\n","import { useEffect } from 'react';\n\nimport type { RefObject } from 'react';\nimport type { ItemProps } from '../types';\n\nexport const useSelect = ({\n  scrollToItem,\n  isSelected,\n  ref,\n}: Pick<ItemProps, 'scrollToItem'> & {\n  readonly isSelected: boolean;\n  readonly ref: RefObject<HTMLElement>;\n}) =>\n  useEffect(() => {\n    if (isSelected && ref.current) {\n      scrollToItem({\n        item: ref.current,\n      });\n    }\n  }, [isSelected, ref, scrollToItem]);\n","import React, { useState, useRef, memo, useCallback } from 'react';\n\nimport { Item } from './item';\n\nimport { useListChange, useScrollToItem } from './hooks';\n\nimport { DEFAULT_VALUE } from './constants';\n\nimport './index.css';\n\nimport type { MakeScrollToItem } from './makeScrollToItem';\nimport type { ItemValue } from './item';\n\ntype Props = Pick<Required<Parameters<MakeScrollToItem>[0]>, 'stickLeft'> & {\n  readonly list: readonly NonNullable<ItemValue>[];\n};\n\nexport const Filter = memo(({ list, stickLeft }: Props) => {\n  const listRef = useRef<null | HTMLUListElement>(null);\n  const [selected, setSelected] = useState<ItemValue>(DEFAULT_VALUE);\n  const reset = useCallback(() => setSelected(DEFAULT_VALUE), [setSelected]);\n  const scrollToItem = useScrollToItem({ ref: listRef, stickLeft });\n\n  useListChange({ list, reset });\n\n  return (\n    <div className=\"scroll-hider\">\n      <ul ref={listRef}>\n        <Item value={DEFAULT_VALUE} selected={selected} setSelected={setSelected} scrollToItem={scrollToItem}>\n          All\n        </Item>\n        {list.map((value) => (\n          <Item key={value} value={value} selected={selected} setSelected={setSelected} scrollToItem={scrollToItem} />\n        ))}\n      </ul>\n    </div>\n  );\n});\n","import { useMemo } from 'react';\nimport { makeScrollToItem } from '../makeScrollToItem';\n\nimport type { RefObject } from 'react';\n\nexport const useScrollToItem = ({\n  ref,\n  stickLeft,\n}: {\n  readonly ref: RefObject<HTMLElement>;\n  readonly stickLeft: boolean;\n}) =>\n  useMemo(\n    () =>\n      makeScrollToItem({\n        containerRef: ref,\n        stickLeft,\n      }),\n    [ref, stickLeft],\n  );\n","import type { RefObject } from 'react';\n\nexport const makeScrollToItem = ({\n  containerRef,\n  stickLeft: stickLeftOriginal = true,\n}: {\n  readonly containerRef: RefObject<HTMLElement>;\n  readonly stickLeft?: boolean;\n}) => ({\n  item,\n  behavior = 'smooth',\n  invertStickLeft = false,\n}: ScrollOptions & { readonly item: HTMLElement | Element; readonly invertStickLeft?: boolean }) => {\n  const { current: container } = containerRef;\n\n  if (!container) {\n    return;\n  }\n\n  const { width: containerWidth, x: containerX } = container.getClientRects()[0];\n  const { width: itemWidth, x: itemX } = item.getClientRects()[0];\n\n  const stickLeft = invertStickLeft ? !stickLeftOriginal : stickLeftOriginal;\n\n  const offset = stickLeft ? itemX - containerX : -(containerWidth - (itemX - containerX) - itemWidth);\n\n  container.scrollTo({ left: container.scrollLeft + offset, behavior });\n};\n\nexport type MakeScrollToItem = typeof makeScrollToItem;\nexport type ScrollToItem = ReturnType<MakeScrollToItem>;\n","import { useEffect } from 'react';\n\nimport type { ItemValue } from '../item';\n\nexport const useListChange = ({ reset, list }: { readonly reset: () => void; readonly list: readonly ItemValue[] }) => {\n  useEffect(reset, [reset, list]);\n};\n","export const LTR_DATA = [\n  'JavaScript',\n  'Electric guitar',\n  'Unboxing',\n  'Podcasts',\n  'Video games',\n  'Tourism',\n  'Quantum Mechanics',\n  'Recently uploaded',\n  'Mixes'\n];\n\n// https://github.com/ramyfares/Lorem-Ipsum-Arabic/blob/master/Usable%20Text\nexport const RTL_DATA = [\n  'حسب الظروف',\n  'لنهاية',\n  'في',\n  'شيء',\n  'غير',\n  'وعليه',\n  'ما اسمك؟',\n  'شكرًا',\n  'من فضلك',\n  'ويذهب',\n  'ويأكل',\n  'لخروف',\n  'عليه',\n  'فتنازع',\n  'يكتب'\n]\n","import React, { useMemo } from 'react';\nimport ReactDOM from 'react-dom';\nimport smoothscroll from 'smoothscroll-polyfill';\nimport 'intersection-observer';\n\nimport { DirSelector } from './dirSelector';\nimport { Filter } from './filter';\n\nimport { useDir } from './useDir';\n\nimport './index.css';\n\nimport { LTR_DATA, RTL_DATA } from './__fixtures__';\n\nsmoothscroll.polyfill();\n\nconst App = () => {\n  const { isLTR, setDir } = useDir();\n  const list = useMemo(() => (isLTR ? LTR_DATA : RTL_DATA), [isLTR]);\n\n  return (\n    <>\n      <DirSelector setDir={setDir} />\n      <Filter stickLeft={isLTR} list={list} />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}
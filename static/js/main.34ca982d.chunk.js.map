{"version":3,"sources":["useDir.ts","dirSelector/index.tsx","filter/button/icon.tsx","filter/button/index.tsx","filter/constants.ts","filter/item/index.tsx","filter/hooks/useInView.ts","filter/item/hooks/useOnClick.ts","filter/item/hooks/useSetInView.ts","filter/item/hooks/useSelect.ts","filter/index.tsx","filter/hooks/useScrollToItem.ts","filter/makeScrollToItem.ts","filter/button/hooks/useBackward.ts","filter/button/hooks/useForward.ts","filter/hooks/useListChange.ts","__fixtures__/index.ts","index.tsx"],"names":["DIR","DirSelector","memo","setDir","onChange","useCallback","value","target","document","body","dir","Icon","flip","className","useMemo","width","height","fill","xmlns","d","BackwardButton","disabled","onClick","type","ForwardButton","DEFAULT_VALUE","undefined","Item","children","selected","setInView","setSelected","scrollToItem","threshold","ref","useRef","useInViewObserver","inViewRef","inView","setRef","node","current","useInView","isSelected","reset","length","useOnClick","text","buttonClassName","useEffect","useSetInView","item","useSelect","data-in-view","Filter","list","stickLeft","listRef","useState","containerRef","baseOffset","stickLeftOriginal","baseOffsetOriginal","behavior","invertStickLeft","container","getClientRects","containerWidth","containerX","x","itemWidth","itemX","offset","scrollTo","left","scrollLeft","makeScrollToItem","useScrollToItem","isDisabled","setIsFirstInView","firstInViewPort","querySelector","previousSibling","useBackward","isBackwardDisabled","backwardOnClick","setLastInView","firstNotInViewPort","useForward","isForwardDisabled","forwardOnClick","init","slice","last","splitList","useListChange","map","LTR_DATA","RTL_DATA","smoothscroll","polyfill","App","isLTR","useDir","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.34ca982d.chunk.js","sourcesContent":["import { useMemo, useState } from 'react';\n\nexport const DIR = {\n  LTR: 'ltr',\n  RTL: 'rtl',\n} as const;\n\nexport type Dir = typeof DIR[keyof typeof DIR];\n\nexport const useDir = () => {\n  const [dir, setDir] = useState<Dir>(DIR.LTR);\n  const isLTR = useMemo(() => dir === DIR.LTR, [dir]);\n\n  return { setDir, isLTR };\n};\n","import React, { memo, useCallback } from 'react';\n\nimport { DIR } from '../useDir';\n\nimport './index.css';\n\nimport type { ChangeEvent } from 'react';\nimport type { Dir } from '../useDir';\n\nexport const DirSelector = memo(({ setDir }: { readonly setDir: (dir: Dir) => void }) => {\n  const onChange = useCallback(\n    ({ target: { value } }: ChangeEvent<HTMLSelectElement>) => {\n      setDir(value as Dir);\n      document.body.dir = value;\n    },\n    [setDir],\n  );\n\n  return (\n    <select onChange={onChange}>\n      <option value={DIR.LTR}>{DIR.LTR}</option>\n      <option value={DIR.RTL}>{DIR.RTL}</option>\n    </select>\n  );\n});\n","import React, { useMemo } from 'react';\n\nexport const Icon = ({ flip = false }: { readonly flip?: boolean }) => {\n  const className = useMemo(() => (flip ? 'flip' : ''), [flip]);\n\n  return (\n    <svg className={className} width=\"6\" height=\"10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M3.91 5L.302 1.667A.964.964 0 010 .965C0 .122 1.003-.315 1.615.262l3.896 3.606a1.556 1.556 0 010 2.264L1.615 9.738C1.003 10.314 0 9.878 0 9.035c0-.266.11-.52.303-.702L3.91 5z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};\n","import React, { memo } from 'react';\n\nimport { Icon } from './icon';\n\nimport './index.css';\n\ntype Props = {\n  readonly disabled: boolean;\n  readonly onClick: () => void;\n};\n\nexport const BackwardButton = memo(({ disabled, onClick }: Props) => (\n  <button type=\"button\" className=\"backward\" disabled={disabled} onClick={onClick}>\n    <Icon flip />\n  </button>\n));\n\nexport const ForwardButton = memo(({ disabled, onClick }: Props) => (\n  <button type=\"button\" className=\"forward\" disabled={disabled} onClick={onClick}>\n    <Icon />\n  </button>\n));\n\nexport { useBackward, useForward } from './hooks'\n","export const DEFAULT_VALUE = undefined;\n","import React, { memo, useMemo } from 'react';\n\nimport { useInView } from '../hooks';\nimport { useOnClick, useSelect, useSetInView } from './hooks';\n\nimport './index.css';\n\nimport type { ItemProps } from './types';\n\nexport const Item = memo(({ children, selected, setInView, setSelected, scrollToItem, value }: ItemProps) => {\n  const { inView, ref, setRef } = useInView({});\n  const isSelected = useMemo(() => selected === value, [selected, value]);\n  const onClick = useOnClick({ setSelected, isSelected });\n  const text = useMemo(() => value || children, [value, children]);\n  const buttonClassName = useMemo(() => (isSelected ? 'selected' : ''), [isSelected]);\n\n  useSetInView({ inView, setInView });\n\n  useSelect({\n    scrollToItem,\n    isSelected,\n    ref,\n  });\n\n  return (\n    <li ref={setRef} data-in-view={`${inView}`}>\n      <button className={buttonClassName} onClick={onClick} type=\"button\" value={value}>\n        {text}\n      </button>\n    </li>\n  );\n});\n\nexport type { ItemValue } from './types';\n","import { useCallback, useRef } from 'react';\nimport { useInView as useInViewObserver } from 'react-intersection-observer';\n\ntype UseInViewObserverParams = Required<Parameters<typeof useInViewObserver>>[0];\n\nexport const useInView = ({ threshold = 0.95 }: Pick<UseInViewObserverParams, 'threshold'>) => {\n  const ref = useRef<HTMLElement>(null);\n  const [inViewRef, inView] = useInViewObserver({\n    threshold,\n  });\n\n  const setRef = useCallback(\n    (node: never) => {\n      // @ts-expect-error https://github.com/thebuilder/react-intersection-observer#how-can-i-assign-multiple-refs-to-a-component\n      ref.current = node;\n      inViewRef(node);\n    },\n    [inViewRef],\n  );\n\n  return {\n    setRef,\n    ref,\n    inView,\n  };\n};\n","import { useCallback } from 'react';\n\nimport { DEFAULT_VALUE } from '../../constants';\n\nimport type { ItemProps } from '../types';\n\nexport const useOnClick = ({\n  setSelected,\n  isSelected,\n}: Pick<ItemProps, 'setSelected'> & {\n  readonly isSelected: boolean;\n}) => {\n  const reset = useCallback(() => setSelected(DEFAULT_VALUE), [setSelected]);\n\n  return useCallback(\n    ({ target: { value } }) => {\n      if (isSelected) {\n        reset();\n        return;\n      }\n\n      setSelected(value.length > 0 ? value : DEFAULT_VALUE);\n    },\n    [isSelected, reset, setSelected],\n  );\n};\n","import { useEffect } from 'react';\n\nimport type { ItemProps } from '../types';\n\nexport const useSetInView = ({\n  inView,\n  setInView,\n}: Pick<ItemProps, 'setInView'> & {\n  readonly inView: boolean;\n}) => {\n  useEffect(() => {\n    if (setInView) {\n      setInView(inView);\n    }\n  }, [inView, setInView]);\n};\n","import { useEffect } from 'react';\n\nimport type { RefObject } from 'react';\nimport type { ItemProps } from '../types';\n\nexport const useSelect = ({\n  scrollToItem,\n  isSelected,\n  ref,\n}: Pick<ItemProps, 'scrollToItem'> & {\n  readonly isSelected: boolean;\n  readonly ref: RefObject<HTMLElement>;\n}) =>\n  useEffect(() => {\n    if (isSelected && ref.current) {\n      scrollToItem({\n        item: ref.current,\n      });\n    }\n  }, [isSelected, ref, scrollToItem]);\n","import React, { useState, useRef, memo, useCallback, useMemo } from 'react';\n\nimport { BackwardButton, ForwardButton, useBackward, useForward } from './button';\nimport { Item } from './item';\n\nimport { useListChange, useScrollToItem } from './hooks';\n\nimport { DEFAULT_VALUE } from './constants';\n\nimport './index.css';\n\nimport type { MakeScrollToItem } from './makeScrollToItem';\nimport type { ItemValue } from './item';\n\ntype List = readonly NonNullable<ItemValue>[];\n\ntype Props = Pick<Required<Parameters<MakeScrollToItem>[0]>, 'stickLeft'> & {\n  readonly list: List;\n};\n\nconst splitList = (list: List) => ({\n  init: [...list.slice(0, list.length - 1)],\n  last: list[list.length - 1],\n});\n\nexport const Filter = memo(({ list, stickLeft }: Props) => {\n  const listRef = useRef<null | HTMLUListElement>(null);\n  const [selected, setSelected] = useState<ItemValue>(DEFAULT_VALUE);\n  const reset = useCallback(() => setSelected(DEFAULT_VALUE), [setSelected]);\n  const scrollToItem = useScrollToItem({ containerRef: listRef, stickLeft, baseOffset: 2 });\n  const { isDisabled: isBackwardDisabled, setIsFirstInView, onClick: backwardOnClick } = useBackward({\n    containerRef: listRef,\n    scrollToItem,\n  });\n  const { isDisabled: isForwardDisabled, setLastInView, onClick: forwardOnClick } = useForward({\n    containerRef: listRef,\n    scrollToItem,\n  });\n  const { init, last } = useMemo(() => splitList(list), [list]);\n\n  useListChange({ list, reset });\n\n  return (\n    <div className=\"scroll-hider\">\n      <BackwardButton disabled={isBackwardDisabled} onClick={backwardOnClick} />\n      <ul ref={listRef}>\n        <Item\n          value={DEFAULT_VALUE}\n          selected={selected}\n          setSelected={setSelected}\n          scrollToItem={scrollToItem}\n          setInView={setIsFirstInView}\n        >\n          All\n        </Item>\n        {init.map((value) => (\n          <Item key={value} value={value} selected={selected} setSelected={setSelected} scrollToItem={scrollToItem} />\n        ))}\n        <Item\n          value={last}\n          selected={selected}\n          setSelected={setSelected}\n          scrollToItem={scrollToItem}\n          setInView={setLastInView}\n        />\n      </ul>\n      <ForwardButton disabled={isForwardDisabled} onClick={forwardOnClick} />\n    </div>\n  );\n});\n","import { useMemo } from 'react';\nimport { makeScrollToItem } from '../makeScrollToItem';\n\nimport type { MakeScrollToItem } from '../makeScrollToItem';\n\nexport const useScrollToItem = ({\n  containerRef,\n  stickLeft,\n  baseOffset,\n}: Parameters<MakeScrollToItem>[0]) =>\n  useMemo(\n    () =>\n      makeScrollToItem({\n        containerRef: containerRef,\n        stickLeft,\n        baseOffset\n      }),\n    [baseOffset, containerRef, stickLeft],\n  );\n","import type { RefObject } from 'react';\n\nexport const makeScrollToItem = ({\n  containerRef,\n  stickLeft: stickLeftOriginal = true,\n  baseOffset: baseOffsetOriginal = 0,\n}: {\n  readonly containerRef: RefObject<HTMLElement>;\n  readonly stickLeft?: boolean;\n  readonly baseOffset?: number;\n}) => ({\n  item,\n  behavior = 'smooth',\n  invertStickLeft = false,\n}: ScrollOptions & { readonly item: HTMLElement | Element; readonly invertStickLeft?: boolean }) => {\n  const { current: container } = containerRef;\n\n  if (!container) {\n    return;\n  }\n\n  const { width: containerWidth, x: containerX } = container.getClientRects()[0];\n  const { width: itemWidth, x: itemX } = item.getClientRects()[0];\n\n  const stickLeft = invertStickLeft ? !stickLeftOriginal : stickLeftOriginal;\n\n  const offset = stickLeft ? itemX - containerX : -(containerWidth - (itemX - containerX) - itemWidth);\n  const baseOffset = stickLeft ? -baseOffsetOriginal : baseOffsetOriginal;\n\n  container.scrollTo({ left: container.scrollLeft + offset + baseOffset, behavior });\n};\n\nexport type MakeScrollToItem = typeof makeScrollToItem;\nexport type ScrollToItem = ReturnType<MakeScrollToItem>;\n","import { useCallback, useState } from 'react';\n\nimport type { RefObject } from 'react';\nimport type { ScrollToItem } from '../../makeScrollToItem';\n\ntype Parameters = {\n  readonly containerRef: RefObject<HTMLElement>;\n  readonly scrollToItem: ScrollToItem;\n};\n\nexport const useBackward = ({ containerRef, scrollToItem }: Parameters) => {\n  const [isFirstInView, setIsFirstInView] = useState<boolean>(true);\n  const onClick = useCallback(() => {\n    const { current: container } = containerRef\n    if (!container) {\n      return;\n    }\n\n    // querySelector?! Yes. Many setState on scroll you're get instead of.\n    const firstInViewPort = container.querySelector('[data-in-view=false] + [data-in-view=true]');\n\n    if (!firstInViewPort || !firstInViewPort.previousSibling) {\n      return;\n    }\n\n    scrollToItem({\n      item: firstInViewPort.previousSibling as HTMLElement,\n      invertStickLeft: true,\n    });\n\n  }, [containerRef, scrollToItem]);\n\n  return {\n    isDisabled: isFirstInView,\n    setIsFirstInView,\n    onClick\n  };\n};\n","import { useCallback, useState } from 'react';\n\nimport type { RefObject } from 'react';\nimport type { ScrollToItem } from '../../makeScrollToItem';\n\ntype Parameters = {\n  readonly containerRef: RefObject<HTMLElement>;\n  readonly scrollToItem: ScrollToItem;\n};\n\nexport const useForward = ({ containerRef, scrollToItem }: Parameters) => {\n  const [isLastInView, setLastInView] = useState<boolean>(true);\n  const onClick = useCallback(() => {\n    const { current: container } = containerRef;\n    if (!container) {\n      return;\n    }\n\n    // querySelector?! Yes. Many setState on scroll you're get instead of.\n    const firstNotInViewPort = container.querySelector('[data-in-view=true] + [data-in-view=false]');\n\n    if (!firstNotInViewPort) {\n      return;\n    }\n\n    scrollToItem({\n      item: firstNotInViewPort,\n    });\n  }, [containerRef, scrollToItem]);\n\n  return {\n    isDisabled: isLastInView,\n    setLastInView,\n    onClick,\n  };\n};\n","import { useEffect } from 'react';\n\nimport type { ItemValue } from '../item';\n\nexport const useListChange = ({ reset, list }: { readonly reset: () => void; readonly list: readonly ItemValue[] }) => {\n  useEffect(reset, [reset, list]);\n};\n","export const LTR_DATA = [\n  'JavaScript',\n  'Electric guitar',\n  'Unboxing',\n  'Podcasts',\n  'Video games',\n  'Tourism',\n  'Quantum Mechanics',\n  'Recently uploaded',\n  'Mixes',\n];\n\n// https://github.com/ramyfares/Lorem-Ipsum-Arabic/blob/master/Usable%20Text\nexport const RTL_DATA = [\n  'حسب الظروف',\n  'لنهاية',\n  'في',\n  'شيء',\n  'غير',\n  'وعليه',\n  'ما اسمك؟',\n  'شكرًا',\n  'من فضلك',\n  'ويذهب',\n  'ويأكل',\n  'لخروف',\n  'عليه',\n  'فتنازع',\n  'يكتب',\n];\n","// It's better to import polyfill if it needed. But for demo it's ok :D\n\nimport React, { useMemo } from 'react';\nimport ReactDOM from 'react-dom';\nimport smoothscroll from 'smoothscroll-polyfill';\nimport 'intersection-observer';\n\nimport { DirSelector } from './dirSelector';\nimport { Filter } from './filter';\n\nimport { useDir } from './useDir';\n\nimport './index.css';\n\nimport { LTR_DATA, RTL_DATA } from './__fixtures__';\n\nsmoothscroll.polyfill();\n\nconst App = () => {\n  const { isLTR, setDir } = useDir();\n  const list = useMemo(() => (isLTR ? LTR_DATA : RTL_DATA), [isLTR]);\n\n  return (\n    <>\n      <DirSelector setDir={setDir} />\n      <Filter stickLeft={isLTR} list={list} />\n    </>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}